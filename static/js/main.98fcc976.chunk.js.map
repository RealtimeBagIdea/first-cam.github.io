{"version":3,"sources":["Components/InnovaCamera.js","App.js","serviceWorker.js","index.js","Images/sfx_songkarn.png"],"names":["InnovaCamera","props","handleTakePhoto","dataUri","setState","isShooted","uri","state","width","height","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","innerWidth","innerHeight","renderer","src","style","position","top","display","SFX_Songkarn","onTakePhoto","maxWidth","maxHeight","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oSAKqBA,E,kDAGjB,WAAYC,GACX,IAAD,8BACI,cAAMA,IAwBVC,gBAAkB,SAACC,GAEf,EAAKC,SAAS,CAACC,WAAW,EAAMC,IAAKH,KAxBrC,EAAKI,MAAQ,CAAEC,MAAO,EAAGC,OAAQ,EAAGJ,WAAW,EAAOC,IAAK,IAC3D,EAAKI,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAJlC,E,gEASIC,KAAKF,yBACLG,OAAOC,iBAAiB,SAAUF,KAAKF,0B,6CAKvCG,OAAOE,oBAAoB,SAAUH,KAAKF,0B,+CAM1CE,KAAKR,SAAS,CAAEI,MAAOK,OAAOG,WAAYP,OAAQI,OAAOI,gB,+BAU5D,IAAD,OACQC,EAAW,sCAcf,OANIA,EANAN,KAAKL,MAAMF,UAMC,6BACI,yBAAKc,IAAKP,KAAKL,MAAMD,IAAKc,MAAO,CAAEC,SAAU,WAAYC,IAAK,MAAOd,MAAOI,KAAKL,MAAMC,MAAQ,KAAMC,OAAQ,OAAQc,QAAS,WAC9H,yBAAKJ,IAAKK,IAAcJ,MAAO,CAAEC,SAAU,WAAYC,IAAK,MAAOd,MAAOI,KAAKL,MAAMC,MAAQ,KAAMC,OAAQG,KAAKL,MAAMC,MAAQ,KAAMe,QAAS,YANlJ,kBAAC,IAAD,CAAQE,YAAc,SAACtB,GAAc,EAAKD,gBAAgBC,IAAYiB,MAAO,CAAEC,SAAU,WAAYC,IAAK,MAAOI,SAAUd,KAAKL,MAAMC,MAAQ,KAAMmB,UAAWf,KAAKL,MAAMC,MAAQ,KAAMe,QAAS,WAW5M,yBAAKH,MAAO,CAAEM,SAAU,OAAQC,UAAW,OAAQJ,QAAS,UACtDL,O,GApDwBU,aCO3BC,MARf,SAAc5B,GACZ,OACE,6BACE,kBAAC,EAAD,QCKc6B,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.98fcc976.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Camera from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\nimport SFX_Songkarn from \"./../Images/sfx_songkarn.png\";\r\n\r\nexport default class InnovaCamera extends Component \r\n{\r\n\r\n    constructor(props) \r\n    {\r\n        super(props);\r\n\r\n        this.state = { width: 0, height: 0, isShooted: false, uri: \"\" };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() \r\n    {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() \r\n    {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n\r\n    updateWindowDimensions() \r\n    {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    \r\n    handleTakePhoto = (dataUri) => \r\n    {\r\n        this.setState({isShooted: true, uri: dataUri});\r\n    }\r\n\r\n    render() \r\n    {\r\n        var renderer = <b>Loading</b>\r\n\r\n        if(!this.state.isShooted)\r\n        {\r\n            renderer = <Camera onTakePhoto={ (dataUri) => { this.handleTakePhoto(dataUri) }} style={{ position: \"absolute\", top: \"0px\", maxWidth: this.state.width + \"px\", maxHeight: this.state.width + \"px\", display: \"block\" }}></Camera>\r\n        }\r\n        else\r\n        {\r\n            renderer =  <div>\r\n                            <img src={this.state.uri} style={{ position: \"absolute\", top: \"0px\", width: this.state.width + \"px\", height: \"100%\", display: \"block\" }}></img>\r\n                            <img src={SFX_Songkarn} style={{ position: \"absolute\", top: \"0px\", width: this.state.width + \"px\", height: this.state.width + \"px\", display: \"block\" }}></img>\r\n                        </div>\r\n        }\r\n\r\n        return (\r\n            <div style={{ maxWidth: \"100%\", maxHeight: \"100$\", display: \"block\" }}>\r\n                { renderer }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport InnovaCamera from \"./Components/InnovaCamera\";\n\n \nfunction App (props) {\n  return (\n    <div>\n      <InnovaCamera />\n    </div>\n  );\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sfx_songkarn.241f70ce.png\";"],"sourceRoot":""}